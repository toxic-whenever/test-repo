package ai.nlp;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.util.*;

/**
 * Kh·ª≠ tr√πng c√°c d√≤ng trong Excel d·ª±a tr√™n (question, answer),
 * gi·ªØ l·∫°i l·∫ßn xu·∫•t hi·ªán ƒë·∫ßu ti√™n, ghi ra file m·ªõi m√† v·∫´n gi·ªØ nguy√™n to√†n b·ªô c·ªôt.
 * <p>
 * C√°ch x√°c ƒë·ªãnh c·ªôt:
 * - T·ª± ƒë·ªông d√≤ theo t√™n header: c·ªôt ch·ª©a "question" v√† "answer" (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng, ch·∫•p nh·∫≠n ch·ª©a t·ª´).
 * - C√≥ th·ªÉ ch·ªâ ƒë·ªãnh t√™n c·ªôt qua args n·∫øu mu·ªën (xem ph·∫ßn main).
 * <p>
 * M·∫∑c ƒë·ªãnh x·ª≠ l√Ω sheet ƒë·∫ßu ti√™n.
 */
public class DedupQuestionAnswerPreserveStructure {

  public static void main(String[] args) {
    // Tham s·ªë CLI (tu·ª≥ ch·ªçn):
    // args[0] = inputPath, args[1] = outputPath, args[2] = questionHeaderName, args[3] = answerHeaderName
    String inputPath = args.length > 0 ? args[0] : "D:\\project\\embedding-service\\src\\main\\java\\ai\\nlp\\input" +
        "\\" + "uplus_10000.xlsx";
    String outputPath = args.length > 1 ? args[1] : "D:\\project\\embedding-service\\src\\main\\java\\ai\\nlp\\input" +
        "\\" + "uplus_10000_dedup.xlsx";
    String qHeaderNameOverride = args.length > 2 ? args[2] : null;
    String aHeaderNameOverride = args.length > 3 ? args[3] : null;

    try (FileInputStream fis = new FileInputStream(inputPath);
         Workbook inWb = new XSSFWorkbook(fis)) {

      Sheet inSheet = inWb.getSheetAt(0);
      if (inSheet == null) {
        throw new IllegalStateException("Kh√¥ng t√¨m th·∫•y sheet ƒë·∫ßu ti√™n.");
      }

      Row header = inSheet.getRow(0);
      if (header == null) {
        throw new IllegalStateException("Kh√¥ng t√¨m th·∫•y h√†ng header (row 0).");
      }

      // S·ªë c·ªôt c·∫ßn gi·ªØ nguy√™n c·∫•u tr√∫c
      int colCount = header.getLastCellNum();

      // T√¨m c·ªôt question/answer
      int qCol = findColumnIndex(header, qHeaderNameOverride, List.of("question", "ques", "query", "prompt", "cauhoi"
          , "hoi"));
      int aCol = findColumnIndex(header, aHeaderNameOverride, List.of("answer", "ans", "response", "completion",
          "traloi", "tra_loi", "reply"));

      if (qCol < 0 || aCol < 0) {
        throw new IllegalStateException("Kh√¥ng t√¨m th·∫•y c·ªôt 'question' ho·∫∑c 'answer' trong header.");
      }

      DataFormatter formatter = new DataFormatter();
      FormulaEvaluator evaluator = inWb.getCreationHelper().createFormulaEvaluator();

      // D√πng LinkedHashSet ƒë·ªÉ v·ª´a tra c·ª©u nhanh, v·ª´a gi·ªØ th·ª© t·ª± l·∫ßn ƒë·∫ßu g·∫∑p
      Set<String> seen = new LinkedHashSet<>();

      // Workbook output
      Workbook outWb = new XSSFWorkbook();
      Sheet outSheet = outWb.createSheet(inSheet.getSheetName() + "_dedup");

      // Ghi header
      Row outHeader = outSheet.createRow(0);
      for (int c = 0; c < colCount; c++) {
        copyCellValue(header.getCell(c), outHeader.createCell(c), formatter, evaluator);
      }

      int lastRow = inSheet.getLastRowNum();
      int outRowIdx = 1;
      int removedDup = 0;
      int removedEmpty = 0;
      int kept = 0;

      for (int r = 1; r <= lastRow; r++) {
        Row row = inSheet.getRow(r);
        if (row == null) continue;

        String qRaw = getCellAsDisplayString(row.getCell(qCol), formatter, evaluator);
        String aRaw = getCellAsDisplayString(row.getCell(aCol), formatter, evaluator);

        String qKey = normalizeForKey(qRaw);
        String aKey = normalizeForKey(aRaw);

        boolean eligible = !qKey.isEmpty() && !aKey.isEmpty();

        if (!eligible) {
          // Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán gom tr√πng ‚áí gi·ªØ nguy√™n
          Row outRow = outSheet.createRow(outRowIdx++);
          for (int c = 0; c < colCount; c++) {
            copyCellValue(row.getCell(c), outRow.createCell(c), formatter, evaluator);
          }
          kept++;
          continue;
        }

        String key = qKey + "||" + aKey;

        if (seen.contains(key)) {
          // ƒê√£ c√≥ c·∫∑p (q,a) tr∆∞·ªõc ƒë√≥ ‚áí xo√° l·∫ßn sau
          removedDup++;
        } else {
          // L·∫ßn ƒë·∫ßu ti√™n ‚áí gi·ªØ l·∫°i v√† ƒë√°nh d·∫•u ƒë√£ th·∫•y
          seen.add(key);
          Row outRow = outSheet.createRow(outRowIdx++);
          for (int c = 0; c < colCount; c++) {
            copyCellValue(row.getCell(c), outRow.createCell(c), formatter, evaluator);
          }
          kept++;
        }
      }

      // Tu·ª≥ ch·ªçn: autosize c√°c c·ªôt (c√≥ th·ªÉ t·ªën th·ªùi gian v·ªõi file l·ªõn)
      for (int c = 0; c < colCount; c++) {
        try {
          outSheet.autoSizeColumn(c);
        } catch (Exception ignore) {
        }
      }

      try (FileOutputStream fos = new FileOutputStream(outputPath)) {
        outWb.write(fos);
      }
      outWb.close();

      int originalRows = lastRow + 1;
      System.out.println("‚úÖ Ho√†n t·∫•t kh·ª≠ tr√πng theo (question, answer).");
      System.out.println("T·ªïng s·ªë d√≤ng g·ªëc (k·ªÉ c·∫£ header): " + (originalRows));
      System.out.println("Gi·ªØ l·∫°i: " + kept + " d√≤ng (kh√¥ng r·ªóng ho·∫∑c kh√¥ng tr√πng).");
      System.out.println("Xo√° do tr√πng: " + removedDup + " d√≤ng.");
      System.out.println("üìÅ File k·∫øt qu·∫£: " + outputPath);

    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  /**
   * T√¨m index c·ªôt. ∆Øu ti√™n t√™n override; n·∫øu kh√¥ng c√≥ th√¨ d√≤ theo danh s√°ch alias.
   */
  private static int findColumnIndex(Row header, String overrideName, List<String> aliases) {
    int colCount = header.getLastCellNum();
    // 1) N·∫øu c√≥ overrideName: match kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng, match ‚Äúch·ª©a‚Äù
    if (overrideName != null && !overrideName.isBlank()) {
      String needle = overrideName.trim().toLowerCase();
      for (int c = 0; c < colCount; c++) {
        String name = safeLower(header.getCell(c));
        if (name.contains(needle)) return c;
      }
    }
    // 2) D√≤ theo alias
    for (int c = 0; c < colCount; c++) {
      String name = safeLower(header.getCell(c));
      if (name == null) continue;
      for (String a : aliases) {
        if (name.contains(a)) return c;
      }
    }
    return -1;
  }

  private static String safeLower(Cell cell) {
    if (cell == null) return null;
    String s = cell.getCellType() == CellType.STRING ? cell.getStringCellValue() : cell.toString();
    return s == null ? null : s.trim().toLowerCase();
  }

  /**
   * L·∫•y chu·ªói hi·ªÉn th·ªã gi·ªëng Excel (DataFormatter) ƒë·ªÉ h·∫°n ch·∫ø l·ªói format s·ªë/ng√†y.
   */
  private static String getCellAsDisplayString(Cell cell, DataFormatter formatter, FormulaEvaluator evaluator) {
    if (cell == null) return "";
    return formatter.formatCellValue(cell, evaluator);
  }

  /**
   * Chu·∫©n ho√° t·∫°o key: trim, g·ªôp kho·∫£ng tr·∫Øng, lowercase.
   */
  private static String normalizeForKey(String s) {
    if (s == null) return "";
    String t = s.trim().replaceAll("\\s+", " ");
    return t.toLowerCase();
  }

  /**
   * Copy gi√° tr·ªã t·ª´ cell ngu·ªìn sang cell ƒë√≠ch (value only, kh√¥ng copy style ƒë·ªÉ ƒë∆°n gi·∫£n/stable).
   */
  private static void copyCellValue(Cell src, Cell tgt, DataFormatter formatter, FormulaEvaluator evaluator) {
    if (src == null) {
      tgt.setBlank();
      return;
    }
    CellType type = src.getCellType();
    if (type == CellType.FORMULA) {
      // V·ªõi c√¥ng th·ª©c: ghi ra gi√° tr·ªã hi·ªÉn th·ªã t∆∞∆°ng t·ª± Excel
      String display = formatter.formatCellValue(src, evaluator);
      tgt.setCellValue(display);
      return;
    }
    switch (type) {
      case STRING:
        tgt.setCellValue(src.getStringCellValue());
        break;
      case NUMERIC:
        if (DateUtil.isCellDateFormatted(src)) {
          // Ghi d·∫°ng s·ªë serial ho·∫∑c d·∫°ng chu·ªói ƒë·ªãnh d·∫°ng? ƒê·ªÉ d·ªÖ ƒë·ªçc: ghi ƒë√∫ng hi·ªÉn th·ªã c·ªßa Excel
          String display = formatter.formatCellValue(src);
          tgt.setCellValue(display);
        } else {
          // Ghi s·ªë th·ª±c t·∫ø (tr√°nh khoa h·ªçc). N·∫øu mu·ªën gi·ªØ y nguy√™n hi·ªÉn th·ªã => d√πng formatter
          String display = formatter.formatCellValue(src);
          // Th·ª≠ parse v·ªÅ s·ªë n·∫øu c√≥ th·ªÉ, n·∫øu kh√¥ng th√¨ ghi chu·ªói hi·ªÉn th·ªã
          try {
            double d = Double.parseDouble(display.replace(",", ""));
            tgt.setCellValue(d);
          } catch (NumberFormatException e) {
            tgt.setCellValue(display);
          }
        }
        break;
      case BOOLEAN:
        tgt.setCellValue(src.getBooleanCellValue());
        break;
      case BLANK:
        tgt.setBlank();
        break;
      default:
        // C√°c lo·∫°i kh√°c: ghi theo hi·ªÉn th·ªã
        String display = formatter.formatCellValue(src);
        tgt.setCellValue(display);
    }
  }
}